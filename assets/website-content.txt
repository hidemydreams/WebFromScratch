
SQL is a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS). It is particularly useful in handling structured data, i.e. data incorporating relations among entities and variables. 
                    
                        
                        SQL was initially developed at IBM by Donald D. Chamberlin and Raymond F. Boyce after learning about the relational model from Edgar F. Codd[14] in the early 1970s.[15] This version, initially called SEQUEL (Structured English Query Language), was designed to manipulate and retrieve data stored in IBM's original quasi-relational database management system, System R, which a group at IBM San Jose Research Laboratory had developed during the 1970s.[15]

                        Chamberlin and Boyce's first attempt at a relational database language was Square, but it was difficult to use due to subscript notation. After moving to the San Jose Research Laboratory in 1973, they began work on SEQUEL.[14] The acronym SEQUEL was later changed to SQL because "SEQUEL" was a trademark of the UK-based Hawker Siddeley Dynamics Engineering Limited company.[16]
                        
                        After testing SQL at customer test sites to determine the usefulness and practicality of the system, IBM began developing commercial products based on their System R prototype including System/38, SQL/DS, and DB2, which were commercially available in 1979, 1981, and 1983, respectively.[17]
                        
                        In the late 1970s, Relational Software, Inc. (now Oracle Corporation) saw the potential of the concepts described by Codd, Chamberlin, and Boyce, and developed their own SQL-based RDBMS with aspirations of selling it to the U.S. Navy, Central Intelligence Agency, and other U.S. government agencies. In June 1979, Relational Software, Inc. introduced the first commercially available implementation of SQL, Oracle V2 (Version2) for VAX computers.
                        
                        By 1986, ANSI and ISO standard groups officially adopted the standard "Database Language SQL" language definition. New versions of the standard were published in 1989, 1992, 1996, 1999, 2003, 2006, 2008, 2011[14] and, most recently, 2016.[citation needed]    </p>





SQL Lesson 3: Filtering and sorting Query results
                        
                        Even though the data in a database may be unique, the results of any particular query may not be – take our Movies table for example, many different movies can be released the same year. In such cases, SQL provides a convenient way to discard rows that have a duplicate column value by using the DISTINCT keyword.
                        Select query with unique results
                        SELECT DISTINCT column, another_column, …
                        FROM mytable
                        WHERE condition(s);
                        
                        Since the DISTINCT keyword will blindly remove duplicate rows, we will learn in a future lesson how to discard duplicates based on specific columns using grouping and the GROUP BY clause.
                        Ordering results
                        
                        Unlike our neatly ordered table in the last few lessons, most data in real databases are added in no particular column order. As a result, it can be difficult to read through and understand the results of a query as the size of a table increases to thousands or even millions rows.
                        
                        To help with this, SQL provides a way to sort your results by a given column in ascending or descending order using the ORDER BY clause.
                        Select query with ordered results
                        SELECT column, another_column, …
                        FROM mytable
                        WHERE condition(s)
                        ORDER BY column ASC/DESC;
                        
                        When an ORDER BY clause is specified, each row is sorted alpha-numerically based on the specified column's value. In some databases, you can also specify a collation to better sort data containing international text.
                        Limiting results to a subset
                        
                        Another clause which is commonly used with the ORDER BY clause are the LIMIT and OFFSET clauses, which are a useful optimization to indicate to the database the subset of the results you care about.
                        The LIMIT will reduce the number of rows to return, and the optional OFFSET will specify where to begin counting the number rows from.
                        Select query with limited rows
                        SELECT column, another_column, …
                        FROM mytable
                        WHERE condition(s)
                        ORDER BY column ASC/DESC
                        LIMIT num_limit OFFSET num_offset;
                        
                        If you think about websites like Reddit or Pinterest, the front page is a list of links sorted by popularity and time, and each subsequent page can be represented by sets of links at different offsets in the database. Using these clauses, the database can then execute queries faster and more efficiently by processing and returning only the requested content.
                        Did you know?
                        
                        If you are curious about when the LIMIT and OFFSET are applied relative to the other parts of a query, they are generally done last after the other clauses have been applied. We'll touch more on this in Lesson 12: Order of execution after introducting a few more parts of the query.
                        Exercise
                        
                        There are a few concepts in this lesson, but all are pretty straight-forward to apply. To spice things up, we've gone and scrambled the Movies table for you in the exercise to better mimic what kind of data you might see in real life. Try and use the necessary keywords and clauses introduced above in your queries.


  SQL Lesson 2: Queries with constraints (Pt. 1)

                        Now we know how to select for specific columns of data from a table, but if you had a table with a hundred million rows of data, reading through all the rows would be inefficient and perhaps even impossible.
                        
                        In order to filter certain results from being returned, we need to use a WHERE clause in the query. The clause is applied to each row of data by checking specific column values to determine whether it should be included in the results or not.
                        Select query with constraints
                        SELECT column, another_column, …
                        FROM mytable
                        WHERE condition
                            AND/OR another_condition
                            AND/OR …;
                        
                        More complex clauses can be constructed by joining numerous AND or OR logical keywords (ie. num_wheels >= 4 AND doors <= 2). And below are some useful operators that you can use for numerical data (ie. integer or floating point):
                        Operator 	Condition 	SQL Example
                        =, !=, < <=, >, >= 	Standard numerical operators 	col_name != 4
                        BETWEEN … AND … 	Number is within range of two values (inclusive) 	col_name BETWEEN 1.5 AND 10.5
                        NOT BETWEEN … AND … 	Number is not within range of two values (inclusive) 	col_name NOT BETWEEN 1 AND 10
                        IN (…) 	Number exists in a list 	col_name IN (2, 4, 6)
                        NOT IN (…) 	Number does not exist in a list 	col_name NOT IN (1, 3, 5)
                        
                        In addition to making the results more manageable to understand, writing clauses to constrain the set of rows returned also allows the query to run faster due to the reduction in unnecessary data being returned.
                        Did you know?
                        
                        As you might have noticed by now, SQL doesn't require you to write the keywords all capitalized, but as a convention, it helps people distinguish SQL keywords from column and tables names, and makes the query easier to read.

  SQL Lesson 1: SELECT queries 101

                        To retrieve data from a SQL database, we need to write SELECT statements, which are often colloquially refered to as queries. A query in itself is just a statement which declares what data we are looking for, where to find it in the database, and optionally, how to transform it before it is returned. It has a specific syntax though, which is what we are going to learn in the following exercises.
                        
                        As we mentioned in the introduction, you can think of a table in SQL as a type of an entity (ie. Dogs), and each row in that table as a specific instance of that type (ie. A pug, a beagle, a different colored pug, etc). This means that the columns would then represent the common properties shared by all instances of that entity (ie. Color of fur, length of tail, etc).
                        
                        And given a table of data, the most basic query we could write would be one that selects for a couple columns (properties) of the table with all the rows (instances).
                        Select query for a specific columns
                        SELECT column, another_column, …
                        FROM mytable;
                        
                        The result of this query will be a two-dimensional set of rows and columns, effectively a copy of the table, but only with the columns that we requested.
                        
                        If we want to retrieve absolutely all the columns of data from a table, we can then use the asterisk (*) shorthand in place of listing all the column names individually.
                        Select query for all columns
                        SELECT * 
                        FROM mytable;
                        
                        This query, in particular, is really useful because it's a simple way to inspect a table by dumping all the data at once.